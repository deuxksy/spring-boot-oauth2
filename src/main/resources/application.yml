spring:
  profiles:
    active: local
  output:
    ansi:
      enabled: always

management:
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
  #        include: ["health","info","loggers","httptrace","env","beans","caches","configprops","mappings","scheduledtasks","sessions","threaddump","jolokia", "logfile", "refresh"]

  endpoint:
    health:
      show-details: ALWAYS

tricycle:
  domain: trcc.com
  url:
    cloud-oauth: http://cloud-oauth-local-service-pig.${tricycle.domain}:18002

---

server:
  port: 18002
  undertow:
    accesslog:
      enabled: true
      dir: log
      rotate: true

spring:
  profiles: local
  datasource:
    platform: h2
    url: jdbc:h2:file:~/oauth;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE;SCHEMA=oauth
#    url: jdbc:h2:mem:oauth;DB_CLOSE_ON_EXIT=FALSE;
    username: sa
    password:
    driver-class-name: org.h2.Driver
    initialization-mode: embedded
#    script 에서 한글 입력 가능 하게
    sql-script-encoding: UTF-8
#    SQL 오류 발생하면 안종료 - true, 종료 - false
    continue-on-error: false
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true
  jpa:
    database: h2
    database-platform: org.hibernate.dialect.H2Dialect
    properties:
      hibernate.format_sql: true
      hibernate.show_sql: true
      hibernate.use_sql_comments: true
      hibernate.jdbc.lob.non_contextual_creation: true
    hibernate:
      # ddl-auto 설정
      # none: 기본 값이며 아무 일도 일어나지 않는다.
      # create: 데이터베이스를 drop 한 후, 데이터베이스를 새로 생성한다.
      # create-drop: SessionFactory가 시작될 때 스키마를 drop하고 재생성하며, SessionFactory가 종료될 때도 스키마를 drop 한다.
      # validate: 데이터베이스 스키마를 검증 한다.
      # update: 데이터베이스 스키마를 갱신 한다.
      ddl-auto: create-drop
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
    show-sql: true
    open-in-view: true

management:
  endpoints:
    web:
      cors:
        allowed-origins:
          - chrome-extension://aejoelaoggembcahagimdiliamlcdmfm
          - http://www.halfclub.com
          - http://www.boribori.co.kr
          - http://www.ogage.co.kr
          - http://www.trcc.tk
          - http://cloud-eureka1-local-service-pig.trcc.com:8761
          - http://cloud-eureka2-local-service-pig.trcc.com:8761
          - http://cloud-config-local-service-pig.trcc.com:8888
          - http://cloud-monitor-local-service-pig.trcc.com:8080
          - http://cloud-oauth-local-service-pig.trcc.com:8081
          - http://cloud-gateway-local-service-pig.trcc.com:8080
          - http://api-skeleton-local-service-pig.trcc.com:28001
          - http://api-skeleton-local-service-pig.trcc.com:28002
          - http://api-skeleton-local-service-pig.trcc.com:28003
          - http://api-skeleton-local-service-pig.trcc.com:28004
          - http://api-skeleton-local-service-pig.trcc.com:28005
          - http://client-skeleton-local-service-pig.trcc.com:38001
          - http://mhalf-main-local-service-pig.trcc.com:38101
          - http://half-list-local-service-pig.trcc.com:38102
          - http://half-main-local-service-pig.trcc.com:38201
          - http://half-list-local-service-pig.trcc.com:38202
          - http://mbori-main-local-service-pig.trcc.com:38301
          - http://mbori-list-local-service-pig.trcc.com:38302
          - http://bori-main-local-service-pig.trcc.com:38401
          - http://bori-list-local-service-pig.trcc.com:38402
          - https://client-payment-local-service-pig.trcc.com:38443
          - http://cloud-eureka1-local-service-pig.trcc.tk:8761
          - http://cloud-eureka2-local-service-pig.trcc.tk:8761
          - http://cloud-config-local-service-pig.trcc.tk:8888
          - http://cloud-monitor-local-service-pig.trcc.tk:8080
          - http://cloud-oauth-local-service-pig.trcc.tk:8081
          - http://cloud-gateway-local-service-pig.trcc.tk:8080
          - http://api-skeleton-local-service-pig.trcc.tk:28001
          - http://api-skeleton-local-service-pig.trcc.tk:28002
          - http://api-skeleton-local-service-pig.trcc.tk:28003
          - http://api-skeleton-local-service-pig.trcc.tk:28004
          - http://api-skeleton-local-service-pig.trcc.tk:28005
          - http://client-skeleton-local-service-pig.trcc.tk:38001
          - http://mhalf-main-local-service-pig.trcc.tk:38101
          - http://half-list-local-service-pig.trcc.tk:38102
          - http://half-main-local-service-pig.trcc.tk:38201
          - http://half-list-local-service-pig.trcc.tk:38202
          - http://mbori-main-local-service-pig.trcc.tk:38301
          - http://mbori-list-local-service-pig.trcc.tk:38302
          - http://bori-main-local-service-pig.trcc.tk:38401
          - http://bori-list-local-service-pig.trcc.tk:38402
          - https://client-payment-local-service-pig.trcc.tk:38443
#        allowed-headers:
#          - Access-Control-Allow-Origin
        allowed-methods:
          - GET
          - POST
          - PUT
          - OPTION
          - DELETE
        allow-credentials: true

security:
  oauth2:
    client:
      client-id: local_client
      client-secret: password
      scope: read_profile, read_posts
    resource:
#      token-info-uri: ${tricycle.url.cloud-oauth}/oauth/check_token #로컬일 경우 직접 OAUTH 호출하자
      jwt:
        key-value: jwt_secret_key

logging:
  file:
    max-history: 30
  path: log
  level:
    ROOT: warn
    com.zzizily: debug
    #    org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener.debug: debug
    #    org.springframework.boot.devtools: debug
    org.springframework.boot: info
    org.springframework.web: info
    org.springframework.web.filter: debug
    org.springframework.security: debug
    org.hibernate.SQL: debug
    org.hibernate.type.descriptor.sql: trace
